{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["Td","styled","td","Coin","props","name","ticker","price","showBalance","balance","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","AccountBalance","buttonText","toggleBalance","amount","handleBalanceToggle","Img","img","Header","header","H1","h1","ExchangeHeader","src","logo","alt","Component","Div","div","priceFormat","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newPriceData","values","newValues","className","oldValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddd184aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Td = styled.td`\n    border: 1px solid #cccccc;\n    width: 25vh;\n`;\n\nexport default function Coin(props) {\n\n    const handleClick = (event) => {\n        //prevents default action\n        event.preventDefault();\n        \n        props.handleRefresh(props.tickerId);\n\n    }\n    return (\n        <tr>\n            <Td>{props.name}</Td>\n            <Td>{props.ticker}</Td>\n            <Td>${props.price}</Td>\n            {props.showBalance ? <Td>{props.balance}</Td> : null}\n            <Td><button onClick={handleClick}> Refresh </button> </Td>\n        </tr>\n    );\n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}\n","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components'; \n\nconst Table = styled.table`\n    margin: 50px auto 50px auto;\n    display: inline-block;\n    font-size: 1.4rem;\n`;\n\nexport default function CoinList(props) {\n\n    return (\n        <Table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Ticker</th>\n                <th>Price</th>\n                {props.showBalance ? <th>Balance</th> : null}\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody>\n            {\n                props.coinData.map( ({key, name, ticker, balance, price} ) => \n                <Coin key={key} \n                tickerId={key}\n                handleRefresh={props.handleRefresh} \n                name={name} \n                ticker={ticker} \n                showBalance={props.showBalance}\n                balance={balance}\n                price={price} />\n                )\n            }\n        </tbody>\n        </Table>\n    )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem;\n`;\n\nexport default function AccountBalance(props) {\n\n    const buttonText = props.showBalance ? \"Hide Balance\" : \"Show Balance\";\n\n    const toggleBalance = props.showBalance ? <> Balance: ${props.amount}</> : null;\n\n    return (\n        <Section>\n            {toggleBalance}\n            <button onClick={props.handleBalanceToggle}> {buttonText} </button>\n        </Section>\n    );\n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport styled from 'styled-components'; \n\nconst Img = styled.img`\n  height: 8rem;\n  pointer-events: auto;\n`;\n\nconst Header = styled.header`\nbackground-color: #282c34;\n  min-height: 20vh;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  color: white;\n`;\n\nconst H1 = styled.h1`\n  font-size: 4rem;\n`;\n\nexport default class ExchangeHeader extends Component {\n    render() {\n        return (\n            <Header>\n            <Img src={logo} alt=\"React Logo\"/>\n            <H1>\n              Coin Exchange\n            </H1>\n          </Header>\n        )\n    }\n}","import React, {useState, useEffect} from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport styled from 'styled-components';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport axios from 'axios';\n\n//import { v4 as uuidv4 } from 'uuid';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: darkblue;\n  color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\n\nconst priceFormat = price => parseFloat(Number( price ).toFixed(3));\n\nfunction App(props) {\n\n  const [balance, setBalance] = useState(10000);\n\n  const [showBalance, setShowBalance] = useState(true);\n\n  const [coinData, setCoinData] = useState([]);\n\n  //cant be used inside of useEffect bc useEffect cannot be async.\n  //must be placed above the useEffect function\n  const componentDidMount = async () => {\n    const response = await axios.get(`https://api.coinpaprika.com/v1/coins`);\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: priceFormat(coin.quotes.USD.price),\n      };\n    });\n      //retrieve the prices here\n    setCoinData(coinPriceData);\n    };\n\n    useEffect(function() {\n      if(coinData.length === 0) {\n        componentDidMount();\n      }\n    });\n  \n  const handleBalanceToggle = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = priceFormat( response.data.quotes.USD.price );\n    const newPriceData = coinData.map( \n      function( values ) {\n      let newValues = {...values};\n      if (values.key === valueChangeId) {\n        newValues.price = newPrice;\n      }\n    return newValues;\n    });\n    setCoinData(newPriceData);\n  }\n\n  return (\n      <Div className=\"App\">\n        <ExchangeHeader />\n        <AccountBalance \n        amount={balance} \n        showBalance={showBalance} \n        handleBalanceToggle={handleBalanceToggle} />\n        <CoinList coinData={coinData} handleRefresh={handleRefresh} showBalance={showBalance}/>\n      </Div>\n  );\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}